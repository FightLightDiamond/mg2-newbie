type Query {
    testcustomer(
        email: String @doc(description: "email of the customer")
    ): Testcustomer
    @resolver(class:"CuongPM\\GraphQLDev\\Model\\Resolver\\Customer")
    @doc(description:
    "The testcustomer query returns information about a customer")
    @cache(cacheable: false)

    getPost(id: Int @doc(description: "id of the customer")): Post
    @resolver(class: "CuongPM\\GraphQLDev\\Model\\Resolver\\Post")
    @doc(description:"The getPost query returns information about a post")
    @cache(cacheable: false)

    getPosts(
        filter: getPostsFilterInput @doc(description: "PostFilterInput")
        pageSize: Int @doc(description: "How many items should show on the page")
        currentPage: Int @doc(description: "Allows to ussing paging it start with 1")
    ): getPostsOutput @resolver(class: "CuongPM\\GraphQLDev\\Model\\Resolver\\Posts") @doc(description: "The Impelemention to resolve Posts")
    @cache(cacheable: false)
}

type Mutation {
    createPost(input: PostInput!): createPostOutput
    @resolver(class: "\\CuongPM\\GraphQLDev\\Model\\Resolver\\CreatePost")
    @doc(description: "The create new post")
    @cache(cacheable: false)

    storePost(
        name: String!
        status: Int!
        content: String!
    ): PostOutput
    @resolver(class: "\\CuongPM\\GraphQLDev\\Model\\Resolver\\StorePost")
    @doc(description: "The create new post")
    @cache(cacheable: false)

    updatePost(
        id: Int!
        name: String!
        status: Int!
        content: String!
    ): PostOutput
    @resolver(class: "CuongPM\\GraphQLDev\\Model\\Resolver\\UpdatePost")
    @doc(description: "The update a post")
    @cache(cacheable: false)

    destroyPost(id: Int @doc(description: "id of the post")): PostOutput
    @resolver(class: "CuongPM\\GraphQLDev\\Model\\Resolver\\DestroyPost")
    @doc(description:
    "The DestroyPost query returns information about a post")
    @cache(cacheable: false)
}

type Testcustomer @doc(description: "Testcustomer defines the customer name and other details") {
    entity_id: Int
    firstname: String
    lastname: String
    email: String
}

type Post @doc(description: "Post by customer") {
    id: Int
    name: String
    status: Int
    content: String
}

input getPostsFilterInput @doc(description: "Input Post Filter for create") {
    name: FilterTypeInput @doc(description: "Input name for Filter")
    status: FilterTypeInput @doc(description: "Input status for Filter")
    content: FilterTypeInput @doc(description: "Input content for Filter")
}

input PostInput @doc(description: "Input Post for create") {
    name: String
    status: Int
    content: String
}

type getPostsOutput @doc(description: "Output Posts for querry"){
    total_count: Int @doc(description: "total_count")
    items: [Post] @doc(description: "items")
}

type createPostOutput {
    cuongpm_post: Post!
}

type PostOutput {
    cuongpm_post: Post!
}
